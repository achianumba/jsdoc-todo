import { getConfig } from "./config";
import { ToDoPluginConfig } from "./types";
import { writeFileSync, existsSync, mkdirSync, readFileSync } from "fs";
import { parse as parsePath } from "path";

export function getToDoText(
  config: ToDoPluginConfig,
  todoList: Array<string>
): string {
  const todoText = `${config.tag}
DO NOT MANUALLY EDIT THIS TO DO LIST !!!
THIS WHOLE SECTION, INCLUDING ITS HEADING IS AUTO-GENERATED BY \`jsdoc-todo\` plugin.
ALL MANUAL CHANGES WILL BE OVERWRITTEN THE NEXT TIME jsdoc RUNS !!!!

IF YOU MUST DIRECTLY/MANUALLY INCLUDE TO DO ITEMS IN THIS DOCUMENT,
PLEASE ADD THEM DIRECTLY BELOW THE "${config.endTag.slice(
    5,
    -4
  )}" HTML COMMENT BELOW. -->

${"#".repeat(config.headingLevel)} ${config.heading}

${todoList.join("\n")}

${config.endTag}

`;

  return todoText;
}

export function writeToDoToFile(file: string, todoText: string) {
  writeFileSync(
    file,
    `${todoText.replaceAll(/\r?\n{3,}/g, "\n\n").trim()}\n`,
    { encoding: "utf-8" }
  );
}

export function save(
  todoList: Array<string>,
  config: ToDoPluginConfig = getConfig()
) {
  if (todoList.length === 0) {
    console.log("No 'to do' items/lists found!");
    return false;
  }

  const outDir = parsePath(config.outFile).dir;
  const todoText = getToDoText(config, todoList);

  // Write the to do list to a new file.
  if (!existsSync(config.outFile)) {
    if (!existsSync(outDir)) {
      mkdirSync(outDir, { recursive: true });
    }

    writeToDoToFile(config.outFile, todoText);
    return true;
  }

  const todoFileContents = readFileSync(config.outFile, {
    encoding: "utf-8",
  }).trim();

  const startIndex = todoFileContents.indexOf(config.tag);

  // @todolist or the user-supplied tag is not found
  if (startIndex === -1) {
    writeToDoToFile(config.outFile, `${todoFileContents}\n\n${todoText}`);
    return true;
  }

  const precedingSections = todoFileContents.slice(0, startIndex).trim();
  const endTagStartIndex = todoFileContents.indexOf(config.endTag);
  const commentClosingTag = todoFileContents.indexOf("-->", endTagStartIndex);
  const subsequentSections = todoFileContents
    .slice(commentClosingTag + 4)
    .trim();

  if (subsequentSections.length === 0) {
    writeToDoToFile(config.outFile, `${precedingSections}\n\n${todoText}`);
    return true;
  }

  writeToDoToFile(
    config.outFile,
    `${precedingSections}\n\n${todoText}${subsequentSections}`
  );

  return true;
}

export default save;
